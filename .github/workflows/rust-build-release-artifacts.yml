# ~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".

name: rust-build-release-artifacts
on:
  release:
    types:
      - published
env:
  CARGO_TERM_COLOR: always
jobs:
  build:
    name: Build on ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
          - build: linux
            os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
            suffix: ""
          - build: macos
            os: macos-latest
            target: x86_64-apple-darwin
            suffix: ""
          - build: windows-gnu
            os: windows-latest
            target: x86_64-pc-windows-gnu
            suffix: .exe
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Install toolchain
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.target }}
      - name: Build
        run: cargo build --release --target ${{ matrix.target }}
      - name: Tests
        run: cargo test --verbose
      - name: Cache cargo registry
        uses: actions/cache@v4
        with:
          path: ~/.cargo/registry
          key: ${{ matrix.target }}-cargo-registry-${{ hashFiles('**/Cargo.lock') }}
      - name: Cache cargo index
        uses: actions/cache@v4
        with:
          path: ~/.cargo/git
          key: ${{ matrix.target }}-cargo-git-${{ hashFiles('**/Cargo.lock') }}
      - name: Cache cargo build
        uses: actions/cache@v4
        with:
          path: target
          key: ${{ matrix.target }}-cargo-build-target-${{ hashFiles('**/Cargo.lock') }}
      - name: Upload Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.target }}-binaries
          path: target/${{ matrix.target }}/release/ssm-env${{ matrix.suffix }}
  release:
    needs: build
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      - name: Download Artifacts
        uses: actions/download-artifact@v4
      - name: Look up existing release upload URL
        id: get_release
        shell: bash
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |-
          api_url="https://api.github.com/repos/${{ github.repository }}"
          tag="${{ github.event.release.tag_name }}"
          # Find release by tag
          resp=$(curl -sSL -H "Authorization: Bearer $GITHUB_TOKEN" -H "Accept: application/vnd.github+json" "$api_url/releases/tags/$tag")
          upload_url=$(echo "$resp" | jq -r '.upload_url')
          if [ -z "$upload_url" ] || [ "$upload_url" = "null" ]; then
            echo "Could not find existing release for tag $tag. Ensure release-please created it." >&2
            exit 1
          fi
          # Trim the templated part {?name,label}
          upload_url=${upload_url%%{*}
          echo "upload_url=$upload_url" >> $GITHUB_OUTPUT
      - name: Upload release assets (x86_64-unknown-linux-gnu)
        id: upload-release-assets-x86_64-unknown-linux-gnu
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.get_release.outputs.upload_url }}
          asset_path: x86_64-unknown-linux-gnu-binaries/ssm-env
          asset_name: ssm-env-x86_64-unknown-linux-gnu
          asset_content_type: application/octet-stream
      - name: Upload release assets (x86_64-apple-darwin)
        id: upload-release-assets-x86_64-apple-darwin
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.get_release.outputs.upload_url }}
          asset_path: x86_64-apple-darwin-binaries/ssm-env
          asset_name: ssm-env-x86_64-apple-darwin
          asset_content_type: application/octet-stream
      - name: Upload release assets (x86_64-pc-windows-gnu)
        id: upload-release-assets-x86_64-pc-windows-gnu
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.get_release.outputs.upload_url }}
          asset_path: x86_64-pc-windows-gnu-binaries/ssm-env.exe
          asset_name: ssm-env-x86_64-pc-windows-gnu.exe
          asset_content_type: application/octet-stream
